#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <memory>
#include <map>

#include <OpenMesh/Core/IO/MeshIO.hh>
#if OM_USE_OSG
#  include <OpenMesh/Tools/Kernel_OSG/TriMesh_OSGArrayKernelT.hh>
#else
#  include <OpenMesh/Core/Mesh/TriMesh_ArrayKernelT.hh>
#endif
#include <OpenMesh/Core/Utils/vector_cast.hh>
#include <OpenMesh/Tools/Utils/getopt.h>
#include <OpenMesh/Tools/Utils/Timer.hh>
/*
#include <OpenMesh/Tools/Decimater/DecimaterT.hh>
#include <OpenMesh/Tools/Decimater/ModAspectRatioT.hh>
#include <OpenMesh/Tools/Decimater/ModEdgeLengthT.hh>
#include <OpenMesh/Tools/Decimater/ModHausdorffT.hh>
#include <OpenMesh/Tools/Decimater/ModNormalDeviationT.hh>
#include <OpenMesh/Tools/Decimater/ModNormalFlippingT.hh>
#include <OpenMesh/Tools/Decimater/ModQuadricT.hh>
#include <OpenMesh/Tools/Decimater/ModProgMeshT.hh>
#include <OpenMesh/Tools/Decimater/ModIndependentSetsT.hh>
#include <OpenMesh/Tools/Decimater/ModRoundnessT.hh>
*/
#include "DecimaterT.hh"
#include "ModAspectRatioT.hh"
#include "ModEdgeLengthT.hh"
#include "ModHausdorffT.hh"
#include "ModNormalDeviationT.hh"
#include "ModNormalFlippingT.hh"
#include "ModQuadricT.hh"
#include "ModProgMeshT.hh"
#include "ModIndependentSetsT.hh"
#include "ModRoundnessT.hh"

#if OM_USE_OSG
typedef OpenMesh::Kernel_OSG::Traits MyTraits;
#else
typedef OpenMesh::DefaultTraits MyTraits;
#endif

#if OM_USE_OSG
typedef OpenMesh::Kernel_OSG::TriMesh_OSGArrayKernelT<MyTraits> ArrayTriMesh;
#else
typedef OpenMesh::TriMesh_ArrayKernelT<MyTraits> ArrayTriMesh;
#endif

typedef OpenMesh::Decimater::DecimaterT<ArrayTriMesh>   Decimater;

#include "dec_options.h"

template <typename Mesh, typename DecimaterType>
bool decimate(const std::string &_ifname,
         const std::string &_ofname,
         DecOptions        &_opt,
         int gverbose)
{
   using namespace std;

   Mesh                   mesh;   
   OpenMesh::IO::Options  opt;
   OpenMesh::Utils::Timer timer;

   // ---------------------------------------- read source mesh
   {
     if (gverbose)
       clog << "source mesh: ";
     bool rc;

     if (gverbose)
       clog << _ifname << endl;
     if ( !(rc = OpenMesh::IO::read_mesh(mesh, _ifname, opt)) )
     {
       cerr << "  ERROR: read failed!" << endl;
       return rc;
     }
   }

   // ---------------------------------------- do some decimation
   {
     // ---- 0 - For module NormalFlipping one needs face normals

     if ( !opt.check( OpenMesh::IO::Options::FaceNormal ) )
     {
       if ( !mesh.has_face_normals() )
         mesh.request_face_normals();

       if (gverbose)
         clog << "  updating face normals" << endl;
       mesh.update_face_normals();
     }

     // ---- 1 - create decimater instance
     DecimaterType decimater( mesh );

     // ---- 2 - register modules
     if (gverbose)
       clog << "  register modules" << endl;



     typename OpenMesh::Decimater::ModAspectRatioT<Mesh>::Handle modAR;

     if (_opt.AR.is_enabled())
     {
       decimater.add(modAR);
       if (_opt.AR.has_value())
         decimater.module( modAR ).set_aspect_ratio( _opt.AR ) ;
     }

     typename OpenMesh::Decimater::ModEdgeLengthT<Mesh>::Handle modEL;

     if (_opt.EL.is_enabled())
     {
       decimater.add(modEL);
       if (_opt.EL.has_value())
         decimater.module( modEL ).set_edge_length( _opt.EL ) ;
       decimater.module(modEL).set_binary(false);
     }

     typename OpenMesh::Decimater::ModHausdorffT <Mesh>::Handle modHD;

     if (_opt.HD.is_enabled())
     {
       decimater.add(modHD);
       if (_opt.HD.has_value())
         decimater.module( modHD ).set_tolerance( _opt.HD ) ;

     }

     typename OpenMesh::Decimater::ModIndependentSetsT<Mesh>::Handle modIS;

     if ( _opt.IS.is_enabled() )
       decimater.add(modIS);

     typename OpenMesh::Decimater::ModNormalDeviationT<Mesh>::Handle modND;

     if (_opt.ND.is_enabled())
     {
       decimater.add(modND);
       if (_opt.ND.has_value())
         decimater.module( modND ).set_normal_deviation( _opt.ND );
       decimater.module( modND ).set_binary(false);
     }

     typename OpenMesh::Decimater::ModNormalFlippingT<Mesh>::Handle modNF;

     if (_opt.NF.is_enabled())
     {
       decimater.add(modNF);
       if (_opt.NF.has_value())
         decimater.module( modNF ).set_max_normal_deviation( _opt.NF );
     }


     typename OpenMesh::Decimater::ModProgMeshT<Mesh>::Handle       modPM;

     if ( _opt.PM.is_enabled() )
       decimater.add(modPM);

     typename OpenMesh::Decimater::ModQuadricT<Mesh>::Handle        modQ;

     if (_opt.Q.is_enabled())
     {
       decimater.add(modQ);
       if (_opt.Q.has_value())
         decimater.module( modQ ).set_max_err( _opt.Q );
       decimater.module(modQ).set_binary(false);
     }

     typename OpenMesh::Decimater::ModRoundnessT<Mesh>::Handle      modR;

     if ( _opt.R.is_enabled() )
     {
       decimater.add( modR );
       if ( _opt.R.has_value() )
         decimater.module( modR ).set_min_angle( _opt.R,
             !modQ.is_valid() ||
             !decimater.module(modQ).is_binary());
     }

     // ---- 3 - initialize decimater

     if (gverbose)
       clog << "initializing mesh" << endl;

     {
       bool rc;
       timer.start();
       rc = decimater.initialize();
       timer.stop();
       if (!rc)
       {
         std::cerr << "  initializing failed!" << std::endl;
         std::cerr << "  maybe no priority module or more than one were defined!" << std::endl;
         return false;
       }
     }
     if (gverbose)
       std::clog << "  Elapsed time: " << timer.as_string() << std::endl;

     if (gverbose)
       decimater.info( clog );

     // ---- 4 - do it

     if (gverbose)
     {
       std::clog << "decimating" << std::endl;
       std::clog << "  # vertices: "       << mesh.n_vertices() << std::endl;
     }

     float nv_before = float(mesh.n_vertices());

     timer.start();
     size_t rc = 0;
     if (_opt.n_collapses < 0.0)
       rc = decimater.decimate_to( size_t(-_opt.n_collapses) );
     else if (_opt.n_collapses >= 1.0 || _opt.n_collapses == 0.0)
       rc = decimater.decimate( size_t(_opt.n_collapses) );
     else if (_opt.n_collapses > 0.0f)
       rc = decimater.decimate_to(size_t(mesh.n_vertices()*_opt.n_collapses));
     timer.stop();

     // ---- 5 - write progmesh file for progviewer (before garbage collection!)

     if ( _opt.PM.has_value() )
       decimater.module(modPM).write( _opt.PM );

     // ---- 6 - throw away all tagged edges

     mesh.garbage_collection();

     if (gverbose)
     {       
       std::clog << "  # executed collapses: " << rc << std::endl;
       std::clog << "  # vertices: " << mesh.n_vertices() << ", " 
           << ( 100.0*mesh.n_vertices()/nv_before ) << "%\n";
       std::clog << "  Elapsed time: " << timer.as_string() << std::endl;
       std::clog << "  collapses/s : " << rc/timer.seconds() << std::endl;
     }

   }

   // write resulting mesh
   if ( ! _ofname.empty() )
   {
     std::string ofname(_ofname);

     std::string::size_type pos = ofname.rfind('.');
     if (pos == std::string::npos)
     {
       ofname += ".off";
       pos = ofname.rfind('.');
     }

     if ( _opt.decorate_name.is_enabled() )
     {
       std::stringstream s; s << mesh.n_vertices();
       std::string       n; s >> n;
       ofname.insert(  pos, "-");
       ofname.insert(++pos, n  );
     }

     OpenMesh::IO::Options opt;

     opt += OpenMesh::IO::Options::Binary; //

     if ( !OpenMesh::IO::write_mesh(mesh, ofname, opt ) )
     {
       std::cerr << "  Cannot write decimated mesh to file '" 
           << ofname << "'\n";
       return false;
     }

     std::clog << "  Exported decimated mesh to file '" << ofname << "'\n";
   }

   return true;
}